// Generated by CoffeeScript 1.3.1

/*
Authenticate with the Dropbox API using OAuth.
*/


(function() {
  var CONSUMER_KEY, CONSUMER_SECRET, OAuthWrapper, ROOT_PATH, TOKEN_KEY, TOKEN_SECRET_KEY, Tokens, URL,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CONSUMER_KEY = "5y95sf8dgsiov5q";

  CONSUMER_SECRET = "xq3uvt45e1imrzi";

  ROOT_PATH = window.location.href.replace(/[^\/]+\.html/, "");

  URL = {
    requestToken: "https://api.dropbox.com/1/oauth/request_token",
    authorize: "https://www.dropbox.com/1/oauth/authorize",
    accessToken: "https://api.dropbox.com/1/oauth/access_token",
    callback: ROOT_PATH + "oauth_callback.html"
  };

  TOKEN_KEY = "oauth_token";

  TOKEN_SECRET_KEY = "oauth_token_secret";

  Tokens = {
    get: function() {
      return [localStorage.getItem(TOKEN_KEY), localStorage.getItem(TOKEN_SECRET_KEY)];
    },
    set: function(token, token_secret) {
      localStorage.setItem(TOKEN_KEY, token);
      return localStorage.setItem(TOKEN_SECRET_KEY, token_secret);
    },
    exist: function() {
      var tokens;
      tokens = Tokens.get();
      return (tokens[0] != null) && (tokens[1] != null);
    },
    clear: function() {
      localStorage.removeItem(TOKEN_KEY);
      return localStorage.removeItem(TOKEN_SECRET_KEY);
    }
  };

  OAuthWrapper = (function() {

    OAuthWrapper.name = 'OAuthWrapper';

    function OAuthWrapper() {
      this.getAccount = __bind(this.getAccount, this);

      this.fetchAccessToken = __bind(this.fetchAccessToken, this);

      this.authorize = __bind(this.authorize, this);
      this.oauth = new OAuth({
        consumerKey: CONSUMER_KEY,
        consumerSecret: CONSUMER_SECRET,
        requestTokenUrl: URL.requestToken,
        authorizationUrl: URL.authorize,
        accessTokenUrl: URL.accessToken,
        callbackUrl: URL.callback
      });
    }

    OAuthWrapper.prototype.showError = function(message) {
      return alert("Error: " + message);
    };

    OAuthWrapper.prototype.authorize = function(callback) {
      var error, success, token, token_secret, _ref,
        _this = this;
      success = function() {
        var token, token_secret, url, _ref;
        _ref = _this.oauth.getAccessToken(), token = _ref[0], token_secret = _ref[1];
        Tokens.set(token, token_secret);
        callback = encodeURIComponent(URL.callback);
        url = URL.authorize + ("?oauth_token=" + token + "&oauth_callback=" + callback);
        return window.open(url);
      };
      error = function(response) {
        console.log(response);
        return _this.showError("Failed to fetch a request token");
      };
      if (Tokens.exist()) {
        _ref = Tokens.get(), token = _ref[0], token_secret = _ref[1];
        this.oauth.setAccessToken(token, token_secret);
        return callback();
      } else {
        return this.oauth.fetchRequestToken(success, error);
      }
    };

    OAuthWrapper.prototype.fetchAccessToken = function() {
      var closeSelectedTab, error, success, token, token_secret, _ref,
        _this = this;
      closeSelectedTab = function() {
        return chrome.tabs.getSelected(null, function(tab) {
          return chrome.tabs.remove(tab.id);
        });
      };
      success = function() {
        var token, token_secret, _ref;
        _ref = _this.oauth.getAccessToken(), token = _ref[0], token_secret = _ref[1];
        Tokens.set(token, token_secret);
        return closeSelectedTab();
      };
      error = function(response) {
        console.log(response);
        _this.showError("Failed to fetch an access token");
        return closeSelectedTab();
      };
      if (Tokens.exist()) {
        _ref = Tokens.get(), token = _ref[0], token_secret = _ref[1];
        this.oauth.setAccessToken(token, token_secret);
        return this.oauth.fetchAccessToken(success, error);
      } else {
        return this.showError("Failed to retrieve a saved access token");
      }
    };

    OAuthWrapper.prototype.getAccount = function(success, error) {
      var url;
      url = "https://api.dropbox.com/1/account/info";
      return this.oauth.getJSON(url, success, error);
    };

    return OAuthWrapper;

  })();

  window.OAuthWrapper = OAuthWrapper;

}).call(this);
