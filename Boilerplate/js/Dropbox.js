// Generated by CoffeeScript 1.3.1
(function() {
  var CONSUMER_KEY, CONSUMER_SECRET, Dropbox, OAuthClient, ROOT_PATH, TOKEN_KEY, TOKEN_SECRET_KEY, Tokens, URL, escapePath,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  CONSUMER_KEY = "5y95sf8dgsiov5q";

  CONSUMER_SECRET = "xq3uvt45e1imrzi";

  ROOT_PATH = window.location.href.replace(/[^\/]+\.html/, "");

  URL = {
    requestToken: "https://api.dropbox.com/1/oauth/request_token",
    authorize: "https://www.dropbox.com/1/oauth/authorize",
    accessToken: "https://api.dropbox.com/1/oauth/access_token",
    callback: ROOT_PATH + "oauth_callback.html"
  };

  TOKEN_KEY = "oauth_token";

  TOKEN_SECRET_KEY = "oauth_token_secret";

  Tokens = {
    get: function() {
      return [localStorage.getItem(TOKEN_KEY), localStorage.getItem(TOKEN_SECRET_KEY)];
    },
    set: function(token, token_secret) {
      localStorage.setItem(TOKEN_KEY, token);
      return localStorage.setItem(TOKEN_SECRET_KEY, token_secret);
    },
    exist: function() {
      var tokens;
      tokens = Tokens.get();
      return (tokens[0] != null) && (tokens[1] != null);
    },
    clear: function() {
      localStorage.removeItem(TOKEN_KEY);
      return localStorage.removeItem(TOKEN_SECRET_KEY);
    }
  };

  OAuthClient = (function() {

    OAuthClient.name = 'OAuthClient';

    function OAuthClient() {
      this._fetchAccessToken = __bind(this._fetchAccessToken, this);

      this.authorize = __bind(this.authorize, this);
      this.oauth = new OAuth({
        consumerKey: CONSUMER_KEY,
        consumerSecret: CONSUMER_SECRET,
        requestTokenUrl: URL.requestToken,
        authorizationUrl: URL.authorize,
        accessTokenUrl: URL.accessToken,
        callbackUrl: URL.callback
      });
    }

    OAuthClient.prototype.showError = function(message) {
      return alert("Error: " + message);
    };

    OAuthClient.prototype.authorize = function(callback) {
      var error, success, token, token_secret, _ref,
        _this = this;
      success = function() {
        var token, token_secret, url, _ref;
        _ref = _this.oauth.getAccessToken(), token = _ref[0], token_secret = _ref[1];
        Tokens.set(token, token_secret);
        callback = encodeURIComponent(URL.callback);
        url = URL.authorize + ("?oauth_token=" + token + "&oauth_callback=" + callback);
        return window.open(url);
      };
      error = function(response) {
        console.log(response);
        return _this.showError("Failed to fetch a request token");
      };
      if (Tokens.exist()) {
        _ref = Tokens.get(), token = _ref[0], token_secret = _ref[1];
        this.oauth.setAccessToken(token, token_secret);
        return callback();
      } else {
        return this.oauth.fetchRequestToken(success, error);
      }
    };

    OAuthClient.prototype._fetchAccessToken = function() {
      var closeSelectedTab, error, success, token, token_secret, _ref,
        _this = this;
      closeSelectedTab = function() {
        return chrome.tabs.getSelected(null, function(tab) {
          return chrome.tabs.remove(tab.id);
        });
      };
      success = function() {
        var token, token_secret, _ref;
        _ref = _this.oauth.getAccessToken(), token = _ref[0], token_secret = _ref[1];
        Tokens.set(token, token_secret);
        return closeSelectedTab();
      };
      error = function(response) {
        console.log(response);
        _this.showError("Failed to fetch an access token");
        return closeSelectedTab();
      };
      if (Tokens.exist()) {
        _ref = Tokens.get(), token = _ref[0], token_secret = _ref[1];
        this.oauth.setAccessToken(token, token_secret);
        return this.oauth.fetchAccessToken(success, error);
      } else {
        return this.showError("Failed to retrieve a saved access token");
      }
    };

    return OAuthClient;

  })();

  Dropbox = (function(_super) {

    __extends(Dropbox, _super);

    Dropbox.name = 'Dropbox';

    Dropbox.prototype.API_VERSION = "1";

    Dropbox.prototype.API_HOST = "api.dropbox.com";

    Dropbox.prototype.API_CONTENT_HOST = "api-content.dropbox.com";

    function Dropbox(root) {
      this.root = root != null ? root : "sandbox";
      this.search = __bind(this.search, this);

      this.metadata = __bind(this.metadata, this);

      this.account_info = __bind(this.account_info, this);

      Dropbox.__super__.constructor.apply(this, arguments);
    }

    Dropbox.prototype.request = function(success, failure, target, params, method, contentHost) {
      var host, url;
      if (params == null) {
        params = {};
      }
      if (method == null) {
        method = "GET";
      }
      if (contentHost == null) {
        contentHost = false;
      }
      host = contentHost ? this.API_CONTENT_HOST : this.API_HOST;
      url = "https://" + host + "/" + this.API_VERSION + target;
      return this.oauth.request({
        method: method,
        url: url,
        data: params,
        success: function(data) {
          return success(JSON.parse(data.text));
        },
        failure: failure
      });
    };

    Dropbox.prototype.account_info = function(success, failure, params) {
      return this.request(success, failure, "/account/info", params);
    };

    Dropbox.prototype.metadata = function(success, failure, path, params) {
      path = escapePath(path);
      return this.request(success, failure, "/metadata/" + this.root + "/" + path, params);
    };

    Dropbox.prototype.search = function(success, failure, path, params) {
      path = escapePath(path);
      return this.request(success, failure, "/search/" + this.root + "/" + path, params);
    };

    return Dropbox;

  })(OAuthClient);

  escapePath = function(path) {
    if (path == null) {
      path = "";
    }
    return path = encodeURIComponent(path).replace(/%2F/g, "/").replace(/^\/+|\/+$/g, "");
  };

  window.Dropbox = Dropbox;

}).call(this);
