// Generated by CoffeeScript 1.3.1
(function() {
  var CONSUMER_KEY, CONSUMER_SECRET, Dropbox, OAuthClient, ROOT_PATH, Tokens, URL, buildUrl, escapePath,
    __hasProp = {}.hasOwnProperty,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  CONSUMER_KEY = "5y95sf8dgsiov5q";

  CONSUMER_SECRET = "xq3uvt45e1imrzi";

  ROOT_PATH = window.location.href.replace(/[^\/]+\.html/, "");

  URL = {
    requestToken: "https://api.dropbox.com/1/oauth/request_token",
    authorize: "https://www.dropbox.com/1/oauth/authorize",
    accessToken: "https://api.dropbox.com/1/oauth/access_token",
    callback: ROOT_PATH + "oauth_callback.html"
  };

  buildUrl = function(path, params) {
    var encode, key, qs, value;
    encode = OAuth.urlencode;
    qs = [
      (function() {
        var _results;
        _results = [];
        for (key in params) {
          if (!__hasProp.call(params, key)) continue;
          value = params[key];
          _results.push(encode(key) + "=" + encode(value));
        }
        return _results;
      })()
    ].join("&");
    if (qs) {
      return path + "?" + qs;
    } else {
      return path;
    }
  };

  escapePath = function(path) {
    if (path == null) {
      path = "";
    }
    return path = encodeURIComponent(path).replace(/%2F/g, "/").replace(/^\/+|\/+$/g, "");
  };

  Tokens = {
    TOKEN: "oauth_token",
    TOKEN_SECRET: "oauth_token_secret",
    get: function() {
      return [localStorage.getItem(Tokens.TOKEN), localStorage.getItem(Tokens.TOKEN_SECRET)];
    },
    set: function(token, token_secret) {
      localStorage.setItem(Tokens.TOKEN, token);
      return localStorage.setItem(Tokens.TOKEN_SECRET, token_secret);
    },
    exist: function() {
      var tokens;
      tokens = Tokens.get();
      return (tokens[0] != null) && (tokens[1] != null);
    },
    clear: function() {
      localStorage.removeItem(Tokens.TOKEN);
      return localStorage.removeItem(Tokens.TOKEN_SECRET);
    }
  };

  OAuthClient = (function() {

    OAuthClient.name = 'OAuthClient';

    function OAuthClient() {
      this._fetchAccessToken = __bind(this._fetchAccessToken, this);

      this.authorize = __bind(this.authorize, this);
      this.oauth = new OAuth({
        consumerKey: CONSUMER_KEY,
        consumerSecret: CONSUMER_SECRET,
        requestTokenUrl: URL.requestToken,
        authorizationUrl: URL.authorize,
        accessTokenUrl: URL.accessToken
      });
    }

    OAuthClient.prototype.showError = function(message) {
      return alert("Error: " + message);
    };

    OAuthClient.prototype.authorize = function(callback) {
      var error, success, token, token_secret, _ref,
        _this = this;
      success = function() {
        var token, token_secret, url, _ref;
        _ref = _this.oauth.getAccessToken(), token = _ref[0], token_secret = _ref[1];
        Tokens.set(token, token_secret);
        callback = encodeURIComponent(URL.callback);
        _this.oauth.setCallbackUrl(URL.callback);
        url = URL.authorize + ("?oauth_token=" + token + "&oauth_callback=" + callback);
        return window.open(url);
      };
      error = function(response) {
        console.log(response);
        return _this.showError("Failed to fetch a request token");
      };
      if (Tokens.exist()) {
        _ref = Tokens.get(), token = _ref[0], token_secret = _ref[1];
        this.oauth.setAccessToken(token, token_secret);
        return callback();
      } else {
        return this.oauth.fetchRequestToken(success, error);
      }
    };

    OAuthClient.prototype._fetchAccessToken = function() {
      var closeSelectedTab, error, success, token, token_secret, _ref,
        _this = this;
      closeSelectedTab = function() {
        return chrome.tabs.getSelected(null, function(tab) {
          return chrome.tabs.remove(tab.id);
        });
      };
      success = function() {
        var token, token_secret, _ref;
        _ref = _this.oauth.getAccessToken(), token = _ref[0], token_secret = _ref[1];
        Tokens.set(token, token_secret);
        return closeSelectedTab();
      };
      error = function(response) {
        console.log(response);
        _this.showError("Failed to fetch an access token");
        return closeSelectedTab();
      };
      if (Tokens.exist()) {
        _ref = Tokens.get(), token = _ref[0], token_secret = _ref[1];
        this.oauth.setAccessToken(token, token_secret);
        return this.oauth.fetchAccessToken(success, error);
      } else {
        return this.showError("Failed to retrieve a saved access token");
      }
    };

    return OAuthClient;

  })();

  Dropbox = (function(_super) {

    __extends(Dropbox, _super);

    Dropbox.name = 'Dropbox';

    Dropbox.prototype.API_VERSION = "1";

    Dropbox.prototype.API_HOST = "api.dropbox.com";

    Dropbox.prototype.API_CONTENT_HOST = "api-content.dropbox.com";

    function Dropbox(root) {
      this.root = root != null ? root : "sandbox";
      this.thumbnails = __bind(this.thumbnails, this);

      this.copy_ref = __bind(this.copy_ref, this);

      this.media = __bind(this.media, this);

      this.shares = __bind(this.shares, this);

      this.search = __bind(this.search, this);

      this.restore = __bind(this.restore, this);

      this.revisions = __bind(this.revisions, this);

      this.delta = __bind(this.delta, this);

      this.metadata = __bind(this.metadata, this);

      this.put_file = __bind(this.put_file, this);

      this.get_file = __bind(this.get_file, this);

      this.account_info = __bind(this.account_info, this);

      Dropbox.__super__.constructor.apply(this, arguments);
    }

    Dropbox.prototype.request = function(method, target, data, headers) {
      var deferred, host, url;
      if (data == null) {
        data = {};
      }
      if (headers == null) {
        headers = {};
      }
      deferred = new jQuery.Deferred;
      host = this.API_HOST;
      if (/^\/files|\/thumbnails/.test(target)) {
        host = this.API_CONTENT_HOST;
      }
      target = escapePath(target);
      url = "https://" + host + "/" + this.API_VERSION + "/" + target;
      this.oauth.request({
        method: method,
        url: url,
        data: data,
        headers: headers,
        success: function(response) {
          return deferred.resolve(JSON.parse(response.text));
        },
        failure: function(response) {
          return deferred.reject(response);
        }
      });
      return deferred.promise();
    };

    Dropbox.prototype.account_info = function(params) {
      return this.request("GET", "/account/info", params);
    };

    Dropbox.prototype.get_file = function(path, params) {
      return this.request("GET", "/files/" + this.root + "/" + path, params);
    };

    Dropbox.prototype.put_file = function(path, params, fileData) {
      var headers, target;
      target = buildUrl("/files_put/" + this.root + "/" + path, params);
      headers = {
        "Content-Type": "text/plain"
      };
      return this.request("PUT", target, fileData, headers);
    };

    Dropbox.prototype.metadata = function(path, params) {
      var target;
      if (path == null) {
        path = "";
      }
      target = "/metadata/" + this.root + "/" + path;
      return this.request("GET", target, params);
    };

    Dropbox.prototype.delta = function(params) {
      var target;
      target = "/delta";
      return this.request("POST", target, params);
    };

    Dropbox.prototype.revisions = function(path, params) {
      var target;
      if (path == null) {
        path = "";
      }
      target = "/revisions/" + this.root + "/" + path;
      return this.request("GET", target, params);
    };

    Dropbox.prototype.restore = function(path, params) {
      var target;
      if (path == null) {
        path = "";
      }
      target = "/restore/" + this.root + "/" + path;
      return this.request("POST", target, params);
    };

    Dropbox.prototype.search = function(path, params) {
      var target;
      if (path == null) {
        path = "";
      }
      target = "/search/" + this.root + "/" + path;
      return this.request("GET", target, params);
    };

    Dropbox.prototype.shares = function(path, params) {
      var target;
      if (path == null) {
        path = "";
      }
      target = "/shares/" + this.root + "/" + path;
      return this.request("POST", target, params);
    };

    Dropbox.prototype.media = function(path, params) {
      var target;
      if (path == null) {
        path = "";
      }
      target = "/media/" + this.root + "/" + path;
      return this.request("POST", target, params);
    };

    Dropbox.prototype.copy_ref = function(path, params) {
      var target;
      if (path == null) {
        path = "";
      }
      target = "/copy_ref/" + this.root + "/" + path;
      return this.request("GET", target, params);
    };

    Dropbox.prototype.thumbnails = function(path, params) {
      var target;
      if (path == null) {
        path = "";
      }
      target = "/thumbnails/" + this.root + "/" + path;
      return this.request("GET", target, params);
    };

    return Dropbox;

  })(OAuthClient);

  window.Dropbox = Dropbox;

}).call(this);
