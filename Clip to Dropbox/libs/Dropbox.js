// Generated by CoffeeScript 1.3.1

/*
Dropbox.js

A Dropbox API client for Javascript.
Intended for use in e.g. Chrome extensions.

Copyright 2012 Matt Holden (holden.matt@gmail.com)
*/


(function() {
  var Dropbox, LocalStorage, OAuthClient, ROOT_PATH, URL, toQueryString,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  ROOT_PATH = window.location.href.replace(/[^\/]+\.html/, "");

  URL = {
    requestToken: "https://api.dropbox.com/1/oauth/request_token",
    authorize: "https://www.dropbox.com/1/oauth/authorize",
    accessToken: "https://api.dropbox.com/1/oauth/access_token",
    callback: ROOT_PATH + "libs/oauth_callback.html"
  };

  LocalStorage = {
    set: function(values) {
      var key, value, _results;
      _results = [];
      for (key in values) {
        if (!__hasProp.call(values, key)) continue;
        value = values[key];
        _results.push(localStorage.setItem(key, value));
      }
      return _results;
    },
    get: function() {
      var key, keys, values;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      values = [
        (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = keys.length; _i < _len; _i++) {
            key = keys[_i];
            _results.push(localStorage.getItem(key));
          }
          return _results;
        })()
      ];
      if (values.length === 1) {
        return values[0];
      } else {
        return values;
      }
    },
    remove: function() {
      var key, keys, _i, _len, _results;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _results.push(localStorage.removeItem(key));
      }
      return _results;
    }
  };

  OAuthClient = (function() {

    OAuthClient.name = 'OAuthClient';

    function OAuthClient(consumerKey, consumerSecret) {
      this._fetchAccessToken = __bind(this._fetchAccessToken, this);

      this.authorize = __bind(this.authorize, this);

      var _ref;
      if ((consumerKey != null) && (consumerSecret != null)) {
        LocalStorage.set({
          consumerKey: consumerKey,
          consumerSecret: consumerSecret
        });
      } else {
        _ref = LocalStorage.get("consumerKey", "consumerSecret"), consumerKey = _ref[0], consumerSecret = _ref[1];
        if (!((consumerKey != null) && (consumerSecret != null))) {
          throw new Error("Missing required consumerKey/consumerSecret");
        }
      }
      this.oauth = new OAuth({
        consumerKey: consumerKey,
        consumerSecret: consumerSecret,
        requestTokenUrl: URL.requestToken,
        authorizationUrl: URL.authorize,
        accessTokenUrl: URL.accessToken
      });
    }

    OAuthClient.prototype.authorize = function() {
      var deferred, error, success, token, token_secret, _ref,
        _this = this;
      deferred = new jQuery.Deferred;
      _ref = LocalStorage.get("oauth_token", "oauth_token_secret"), token = _ref[0], token_secret = _ref[1];
      if ((token != null) && (token_secret != null)) {
        this.oauth.setAccessToken(token, token_secret);
        deferred.resolve();
      } else {
        success = function() {
          var callback, url, _ref1;
          _ref1 = _this.oauth.getAccessToken(), token = _ref1[0], token_secret = _ref1[1];
          LocalStorage.set({
            request_token: token,
            request_token_secret: token_secret
          });
          callback = encodeURIComponent(URL.callback);
          _this.oauth.setCallbackUrl(URL.callback);
          url = URL.authorize + ("?oauth_token=" + token + "&oauth_callback=" + callback);
          return window.open(url);
        };
        error = function(response) {
          throw new Error("Failed to fetch a request token: " + response);
        };
        this.oauth.fetchRequestToken(success, error);
      }
      return deferred.promise();
    };

    OAuthClient.prototype._fetchAccessToken = function() {
      var closeTab, error, success, token, token_secret, _ref,
        _this = this;
      _ref = LocalStorage.get("request_token", "request_token_secret"), token = _ref[0], token_secret = _ref[1];
      if (!((token != null) && (token_secret != null))) {
        throw new Error("Failed to retrieve a saved request token");
      }
      closeTab = function() {
        return chrome.tabs.getSelected(null, function(tab) {
          return chrome.tabs.remove(tab.id);
        });
      };
      success = function() {
        var _ref1;
        _ref1 = _this.oauth.getAccessToken(), token = _ref1[0], token_secret = _ref1[1];
        LocalStorage.set({
          oauth_token: token,
          oauth_token_secret: token_secret
        });
        return closeTab();
      };
      error = function(response) {
        throw new Error("Failed to fetch an access token: " + response);
        return closeTab();
      };
      this.oauth.setAccessToken(token, token_secret);
      return this.oauth.fetchAccessToken(success, error);
    };

    return OAuthClient;

  })();

  Dropbox = (function(_super) {

    __extends(Dropbox, _super);

    Dropbox.name = 'Dropbox';

    Dropbox.prototype.API_VERSION = "1";

    Dropbox.prototype.API_HOST = "api.dropbox.com";

    Dropbox.prototype.API_CONTENT_HOST = "api-content.dropbox.com";

    function Dropbox(consumerKey, consumerSecret, root) {
      this.root = root != null ? root : "sandbox";
      this.file_move = __bind(this.file_move, this);

      this.file_delete = __bind(this.file_delete, this);

      this.file_create_folder = __bind(this.file_create_folder, this);

      this.file_copy_by_ref = __bind(this.file_copy_by_ref, this);

      this.file_copy = __bind(this.file_copy, this);

      this.copy_ref = __bind(this.copy_ref, this);

      this.thumbnails = __bind(this.thumbnails, this);

      this.media = __bind(this.media, this);

      this.shares = __bind(this.shares, this);

      this.search = __bind(this.search, this);

      this.restore = __bind(this.restore, this);

      this.revisions = __bind(this.revisions, this);

      this.delta = __bind(this.delta, this);

      this.metadata = __bind(this.metadata, this);

      this.put_file = __bind(this.put_file, this);

      this.get_file = __bind(this.get_file, this);

      this.account_info = __bind(this.account_info, this);

      this.request = __bind(this.request, this);

      Dropbox.__super__.constructor.call(this, consumerKey, consumerSecret);
    }

    Dropbox.prototype.request = function(method, target, params, body, headers) {
      var data, deferred, host, qs, url;
      if (params == null) {
        params = {};
      }
      deferred = new jQuery.Deferred;
      host = this.API_HOST;
      if (/^\/files|^\/thumbnails/.test(target)) {
        host = this.API_CONTENT_HOST;
      }
      target = encodeURIComponent(target).replace(/%2F/g, "/").replace(/^\/+|\/+$/g, "");
      if (body != null) {
        data = body;
        qs = toQueryString(params);
        if (qs) {
          target += "?" + qs;
        }
      } else {
        data = params;
      }
      url = "https://" + host + "/" + this.API_VERSION + "/" + target;
      this.oauth.request({
        method: method,
        url: url,
        data: data,
        headers: headers,
        success: function(response) {
          var contentType, metadata, value, _ref;
          headers = response != null ? response.responseHeaders : void 0;
          contentType = headers != null ? headers["Content-Type"] : void 0;
          metadata = headers != null ? headers["x-dropbox-metadata"] : void 0;
          value = response.text;
          if (contentType === "application/json" || contentType === "text/javascript") {
            value = JSON.parse(value);
          }
          metadata = response != null ? (_ref = response.responseHeaders) != null ? _ref["x-dropbox-metadata"] : void 0 : void 0;
          metadata = metadata != null ? JSON.parse(metadata) : void 0;
          if (metadata != null) {
            return deferred.resolve(value, metadata);
          } else {
            return deferred.resolve(value);
          }
        },
        failure: function(response) {
          console.log("Request failed: ", response);
          return deferred.reject(response);
        }
      });
      return deferred.promise();
    };

    Dropbox.prototype.account_info = function() {
      return this.request("GET", "/account/info");
    };

    Dropbox.prototype.get_file = function(path, params) {
      if (path == null) {
        path = "";
      }
      if (params == null) {
        params = {};
      }
      return this.request("GET", "/files/" + this.root + "/" + path, params);
    };

    Dropbox.prototype.put_file = function(path, params, content, headers) {
      var target;
      if (path == null) {
        path = "";
      }
      if (params == null) {
        params = {};
      }
      if (content == null) {
        content = "";
      }
      if (headers == null) {
        headers = {};
      }
      target = "/files_put/" + this.root + "/" + path;
      return this.request("PUT", target, params, content, headers);
    };

    Dropbox.prototype.metadata = function(path, params) {
      if (path == null) {
        path = "";
      }
      if (params == null) {
        params = {};
      }
      return this.request("GET", "/metadata/" + this.root + "/" + path, params);
    };

    Dropbox.prototype.delta = function(params) {
      if (params == null) {
        params = {};
      }
      return this.request("POST", "/delta", params);
    };

    Dropbox.prototype.revisions = function(path, params) {
      if (path == null) {
        path = "";
      }
      if (params == null) {
        params = {};
      }
      return this.request("GET", "/revisions/" + this.root + "/" + path, params);
    };

    Dropbox.prototype.restore = function(path, params) {
      if (path == null) {
        path = "";
      }
      if (params == null) {
        params = {};
      }
      return this.request("POST", "/restore/" + this.root + "/" + path, params);
    };

    Dropbox.prototype.search = function(path, params) {
      if (path == null) {
        path = "";
      }
      if (params == null) {
        params = {};
      }
      return this.request("GET", "/search/" + this.root + "/" + path, params);
    };

    Dropbox.prototype.shares = function(path) {
      if (path == null) {
        path = "";
      }
      return this.request("POST", "/shares/" + this.root + "/" + path);
    };

    Dropbox.prototype.media = function(path) {
      if (path == null) {
        path = "";
      }
      return this.request("POST", "/media/" + this.root + "/" + path);
    };

    Dropbox.prototype.thumbnails = function(path, params) {
      if (path == null) {
        path = "";
      }
      if (params == null) {
        params = {};
      }
      return this.request("GET", "/thumbnails/" + this.root + "/" + path, params);
    };

    Dropbox.prototype.copy_ref = function(path) {
      if (path == null) {
        path = "";
      }
      return this.request("GET", "/copy_ref/" + this.root + "/" + path);
    };

    Dropbox.prototype.file_copy = function(from, to, params) {
      return this.request("POST", "/fileops/copy", {
        root: this.root,
        from_path: from,
        to_path: to
      });
    };

    Dropbox.prototype.file_copy_by_ref = function(from, to, params) {
      return this.request("POST", "/fileops/copy", {
        root: this.root,
        from_copy_ref: from,
        to_path: to
      });
    };

    Dropbox.prototype.file_create_folder = function(path) {
      return this.request("POST", "/fileops/create_folder", {
        root: this.root,
        path: path
      });
    };

    Dropbox.prototype.file_delete = function(path) {
      return this.request("POST", "/fileops/delete", {
        root: this.root,
        path: path
      });
    };

    Dropbox.prototype.file_move = function(from, to, params) {
      if (params == null) {
        params = {};
      }
      return this.request("POST", "/fileops/move", {
        root: this.root,
        from_path: from,
        to_path: to
      });
    };

    return Dropbox;

  })(OAuthClient);

  toQueryString = function(params) {
    var encode, encoded, key, value;
    encode = OAuth.urlEncode;
    encoded = [];
    for (key in params) {
      if (!__hasProp.call(params, key)) continue;
      value = params[key];
      if ((key != null) && (value != null)) {
        encoded.push(encode(key) + "=" + encode(value));
      }
    }
    return encoded.join("&");
  };

  if (/\/oauth_callback.html\?/.test(window.location.href)) {
    new Dropbox()._fetchAccessToken();
  }

  window.Dropbox = Dropbox;

}).call(this);
